
function rect(x, y, w, h, c, outline) {
	return draw_rectangle_color(
		x-w/2, y-h/2, x+w/2, y+h/2, c, c, c, c, outline
	);
}

function slider(x, y, width, height, line_w, line_color, func, offset = 0) {
	static off = offset;
	
	draw_line_width_color(x-width/2, y, x+width/2, y, line_w, line_color, line_color);
	draw_rectangle((x+off)-4, y-height/2, (x+off)+4, y+height/2, true);
	
	var collision = (mouse_x > x-width/2 && mouse_x < x+width/2 && mouse_y > y-height/2 && mouse_y < y+height/2);
	if (collision) {
		draw_rectangle((x+off)-4, y-height/2, (x+off)+4, y+height/2, false);
		if (mouse_check_button(mb_left)) {
			off = mouse_x-x;
			func();
		}
	}
	
	return off+width/2;
}

function draw_3d(spr, x, y, xscale, yscale, rot, col, alpha) {
	for (var i = 0; i < sprite_get_number(spr); i++) {
		var yy = y-(i*10);
		draw_sprite_ext(spr, i, x, yy, xscale, yscale, rot, col, alpha);
	}
}

function button(x, y, w, h, str, c1, c2, scl, outline, func) {
	var range = (mouse_x > x && mouse_x < x+w && mouse_y > y && mouse_y < y+h);
	
	if (outline) {
		draw_rectangle_color(x, y, x+w, y+h, c2, c2, c2, c2, true);
	}
	
	draw_text_transformed_color(x+w/2, y+h/2, str, scl, scl, 0, c1, c1, c1, c1, 1);

	if (range) {
		
		draw_rectangle_color(x, y, x+w, y+h, c2, c2, c2, c2, false);
		draw_text_transformed_color(x+w/2, y+h/2, str, scl, scl, 0, c1, c1, c1, c1, 1);
		
		func();
		
	} else {
		
	}
}

function button_input(x, y, w, h, str, offset, c1, c2, scl, outline, func) {
	var range = (mouse_x > x && mouse_x < x+w && mouse_y > y && mouse_y < y+h);
	
	if (outline) {
		draw_rectangle_color(x, y, x+w, y+h, c2, c2, c2, c2, true);
	}
	
	draw_text_transformed_color((x)+offset, y+h/2, str, scl, scl, 0, c1, c1, c1, c1, 1);

	if (range) {
		window_set_cursor(cr_beam);
		
		draw_rectangle_color(x, y, x+w, y+h, c2, c2, c2, c2, false);
		draw_text_transformed_color((x)+offset, y+h/2, str, scl, scl, 0, c1, c1, c1, c1, 1);
		
		func();
		
	} else {
		window_set_cursor(cr_default);
	}
}

function button_filled(x, y, w, h, str, c1, c2, c3, scl, outline, func) {
	var range = (mouse_x > x && mouse_x < x+w && mouse_y > y && mouse_y < y+h);
	
	if (outline) {
		draw_rectangle_color(x, y, x+w, y+h, c2, c2, c2, c2, true);
		draw_rectangle_color(x, y, x+w, y+h, c2, c2, c2, c2, false);
	}
	
	draw_text_transformed_color(x+w/2, y+h/2, str, scl, scl, 0, c1, c1, c1, c1, 1);

	if (range) {
		
		draw_rectangle_color(x, y, x+w, y+h, c3, c3, c3, c3, false);
		draw_rectangle_color(x, y, x+w, y+h, c1, c1, c1, c1, true);
		draw_text_transformed_color(x+w/2, y+h/2, str, scl, scl, 0, c1, c1, c1, c1, 1);
		
		func();
		
	} else {
		
	}
}

function button_round(x, y, w, h, str, width, c1, c2, scl, outline, func, sublist) {
	var range = (mouse_x > x && mouse_x < x+w && mouse_y > y && mouse_y < y+h);
	static sublist_open = false;
	
	if (outline) {
		for (var i = 0; i < width; i+=0.5) {
			draw_roundrect_color(x+i, y+i, (x+w)-i, (y+h)-i, c2, c2, true);
		}
	}
	
	draw_text_transformed_color(x+w/2, y+h/2, str, scl, scl, 0, c1, c1, c1, c1, 1);

	if (range) {
		
		draw_roundrect_color(x, y, x+w, y+h, c2, c2, false);
		draw_text_transformed_color(x+w/2, y+h/2, str, scl, scl, 0, c1, c1, c1, c1, 1);
		
		func();
		
		if (mouse_check_button_pressed(mb_right)) {
			sublist_open = !sublist_open;
			popup_x = mouse_x;
			popup_y = mouse_y;
		}
		
	} else {
	}
	
	if (sublist_open) sublist();
}

function button_round_filled(x, y, w, h, str, width, c1, c2, c3, scl, outline, func) {
	var range = (mouse_x > x && mouse_x < x+w && mouse_y > y && mouse_y < y+h);
	
	draw_roundrect_color(x, y, (x+w), (y+h), c3, c3, false);
	
	if (outline) {
		for (var i = 0; i < width; i+=0.5) {
			draw_roundrect_color(x+i, y+i, (x+w)-i, (y+h)-i, c2, c2, true);
		}
	}
	
	draw_text_transformed_color(x+w/2, y+h/2, str, scl, scl, 0, c1, c1, c1, c1, 1);

	if (range) {
		draw_roundrect_color(x, y, x+w, y+h, c2, c2, false);
		draw_text_transformed_color(x+w/2, y+h/2, str, scl, scl, 0, c1, c1, c1, c1, 1);
		
		func();
		
		if (mouse_check_button_pressed(mb_right)) {
			sublist_open = !sublist_open;
			popup_x = mouse_x;
			popup_y = mouse_y;
		}
	}
}

function circle_button(x, y, r, variable, func) {
	draw_circle(x, y, r*1.2, true);
	
	if (variable) {
		draw_circle(x, y, r*0.8, false);
	}
	
	var range = (mouse_x > x-r/2 && mouse_x < x+r/2 && mouse_y > y-r/2 && mouse_y < y+r/2);
	if (range) {
		if (mouse_check_button_pressed(mb_left)) {
			func();
		}
	}
}

function save_id(file, save) {
	var str = json_stringify(save);
	var buffer = buffer_create(string_byte_length(str)+1, buffer_fixed, 1);
	buffer_write(buffer, buffer_string, str);
	buffer_save(buffer, file);
	buffer_delete(buffer);
}

function load_id(file) {
	if (file_exists(file)) {
		var buffer	= buffer_load(file);
		var str		= buffer_read(buffer, buffer_string);
		buffer_delete(buffer);
		var data = json_parse(str);
		map = data;
	}
}